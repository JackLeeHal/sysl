package seqs

import (
	"bytes"
	"fmt"
	"io"
	"strings"
)

type SequenceDiagramWriter struct {
	ind            int
	isEndOfLine    bool
	autogenWarning bool
	active         map[string]int
	properties     []string
	head           bytes.Buffer
	body           bytes.Buffer
}

func MakeSequenceDiagramWriter(autogenWarning bool, properties ...string) *SequenceDiagramWriter {
	p := make([]string, 0, len(properties))
	p = append(p, properties...)
	return &SequenceDiagramWriter{
		autogenWarning: autogenWarning,
		properties:     p,
		active:         make(map[string]int),
	}
}

func (s *SequenceDiagramWriter) WriteTo(w io.Writer) (n int64, err error) {
	i, err := fmt.Fprint(w, s.String())

	return int64(i), err
}

func (s *SequenceDiagramWriter) Write(p []byte) (n int, err error) {
	newline := []byte("\n")
	newlines := bytes.Count(p, newline)
	if newlines == 0 {
		if s.isEndOfLine {
			s.writeIndent()
		}
		n, err = s.body.Write(p)
		s.isEndOfLine = false
		return n, err
	}

	frags := bytes.SplitN(p, newline, newlines+1)

	for i, frag := range frags {
		if s.isEndOfLine {
			s.writeIndent()
		}
		nn, err := s.body.Write(frag)
		n += nn
		if err != nil {
			return n, err
		}
		if i+1 < len(frags) {
			if err := s.WriteByte('\n'); err != nil {
				return n, err
			}
			n++
		}
	}
	s.isEndOfLine = len(frags[len(frags)-1]) == 0
	return n, nil
}

func (s *SequenceDiagramWriter) WriteString(v string) (n int, err error) {
	return s.Write([]byte(v))
}

func (s *SequenceDiagramWriter) WriteByte(c byte) error {
	if s.isEndOfLine {
		s.writeIndent()
	}

	err := s.body.WriteByte(c)
	s.isEndOfLine = c == '\n'

	return err
}

func (s *SequenceDiagramWriter) WriteHead(v string) {
	fmt.Fprintln(&s.head, v)
}

func (s *SequenceDiagramWriter) Indent() {
	s.ind++
}

func (s *SequenceDiagramWriter) Unindent() {
	if s.ind == 0 {
		return
	}
	s.ind--
}

func (s *SequenceDiagramWriter) Activate(agent string) {
	s.active[agent]++
	s.WriteString(fmt.Sprintf("activate %s\n", agent))
}

func (s *SequenceDiagramWriter) Activated(agent string, suppressed bool) func() {
	if !suppressed {
		s.Activate(agent)
	}

	active := !suppressed

	return func() {
		if active {
			active = false
			s.Deactivate(agent)
		}
	}
}

func (s *SequenceDiagramWriter) Deactivate(agent string) {
	if v, ok := s.active[agent]; !ok || v == 0 {
		return
	}

	s.active[agent]--
	s.WriteString(fmt.Sprintf("deactivate %s\n", agent))

	if s.active[agent] == 0 {
		delete(s.active, agent)
	}
}

func (s *SequenceDiagramWriter) writeIndent() {
	if !s.isEndOfLine {
		return
	}

	spaces := make([]byte, 0, s.ind)
	for i := 0; i < s.ind; i++ {
		spaces = append(spaces, ' ')
	}
	s.body.Write(spaces)
	s.isEndOfLine = false
}

func (s *SequenceDiagramWriter) String() string {
	if s.body.Len() == 0 || s.head.Len() == 0 {
		return ""
	}

	var sb strings.Builder
	if s.autogenWarning {
		fmt.Fprintln(&sb, "''''''''''''''''''''''''''''''''''''''''''")
		fmt.Fprintln(&sb, "''                                      ''")
		fmt.Fprintln(&sb, "''  AUTOGENERATED CODE -- DO NOT EDIT!  ''")
		fmt.Fprintln(&sb, "''                                      ''")
		fmt.Fprintln(&sb, "''''''''''''''''''''''''''''''''''''''''''")
		fmt.Fprintln(&sb)
	}
	fmt.Fprintln(&sb, "@startuml")
	sb.WriteString(s.head.String())
	for _, p := range s.properties {
		fmt.Fprintln(&sb, p)
	}
	sb.WriteString(s.body.String())
	fmt.Fprintln(&sb, "@enduml")

	return sb.String()
}
